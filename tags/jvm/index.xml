<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on ArgsNo&#39;s Notes</title>
    <link>https://argsno.github.com/tags/jvm/</link>
    <description>Recent content in JVM on ArgsNo&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Dec 2017 11:29:51 +0000</lastBuildDate>
    
	<atom:link href="https://argsno.github.com/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java ClassLoader</title>
      <link>https://argsno.github.com/2017/java-classloader/</link>
      <pubDate>Wed, 06 Dec 2017 11:29:51 +0000</pubDate>
      
      <guid>https://argsno.github.com/2017/java-classloader/</guid>
      <description> 类加载的时机 类的整个生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）7个阶段。其中验证、准备、解析3个部分统称为连接（Linking）。
虚拟机规范中严格规定了有且只有5种情况必须立即对类进行“初始化”：
 遇到new、getstatic、putstatic和invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要触发其初始化。常见的Java代码场景：使用new关键字实例化对象的时候、读取或设置一个类的静态字段（被final修饰、已在编译器把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。
 使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。
 当初始化一个类的时候，如果发现其父类还没有初始化，则需要先触发其父类的初始化。
 当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。
 当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。
  这5种场景中的行为称为对一个类进行主动调用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用包括：
 通过子类引用父类的静态字段，不会导致子类初始化。 通过数组定义来引用类，不会触发类的初始化。 常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。  接口与类真正有所区别的初始化场景：在一个接口初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量）才会初始化。
类加载的过程 加载 在加载阶段，虚拟机需要完成一下3件事情：
 通过一个类的全限定名来获取此类的二进制字节流。 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。  验证 验证是连接阶段的第一步。这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害自身的安全。 验证阶段大致会完成下面4个阶段的检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证。文件格式验证是基于二进制字节流进行的，后面的3个验证阶段全部是基于方法区的存储结构进行的。
 文件格式验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。 元数据验证：对字节码描述的信息进行语义分析，已保证其描述的信息符合Java语言规范的要求。 字节码验证：通过数据流和控制流分析，确保程序语义是合法的、符合逻辑的。 符号引用验证：可以看做是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验。  准备 准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。
解析 解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。
初始化 初始化阶段是执行类构造器&amp;lt;clinit&amp;gt;()方法的过程。
类加载器 类与类加载器 类加载器只用于实现类的加载动作。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。
双亲委派模型 从Java虚拟机的角度来讲，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），是虚拟机自身的一部分；另一种就是所有其他的类加载器，这些类加载器都由Java语言实现，独立于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。
从Java开发人员的角度来看，类加载器还可以划分得更细致一些，绝大部分Java程序都会使用到以下3中系统提供的类加载器。
 启动类加载器：这个类加载器负责存放在/lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可。 扩展类加载器（Extension ClassLoader）：这个类加载器有sun.misc.Launcher$ExtClassLoader实现，它负责加载/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库。开发者可以直接使用扩展类加载器。 应用程序类加载器（Application ClassLoader）：这个类加载器由sun.misc.Launcher$AppClassLoader实现。它负责加载用户类路径（ClassPath）上所指定的类库。开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类机载器，一般情况下这个就是程序中默认的类加载器。  </description>
    </item>
    
    <item>
      <title>Java 运行时数据区域</title>
      <link>https://argsno.github.com/2017/java-runtime-data/</link>
      <pubDate>Tue, 05 Dec 2017 10:33:17 +0000</pubDate>
      
      <guid>https://argsno.github.com/2017/java-runtime-data/</guid>
      <description>程序计数器 当前线程所执行的字节码的行号指示器，用于记录下一条要执行的指令。每个线程都需要有一个独立的程序计数器，线程私有。 如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。
此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。
Java虚拟机栈 线程私有，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。局部变量表中存放了编译器可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型）和returnAddress类型（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，在方法运行期间不会改变局部变量表的大小。
两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。
本地方法栈 与虚拟机栈相似，只不过是为虚拟机所用到的Native方法服务。
Java堆 Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建，用于存放对象实例。可以通过-Xmx和-Xms控制大小。
如果在堆中没有内存完成实例分配，并且堆也无法在扩展时，将会抛出OutOfMemoryError异常。
方法区 各个线程共享的内存区域。用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。这区域的内存回收目标主要针对常量池的回收和对类型的卸载。
当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。
运行时常量池 运行时常量池是方法区的一部分。用于存放Class文件中的常量池以及在运行期间可能将新的常量放入池中。
当常量池无法再申请内存时会抛出OutOfMemoryError异常。
直接内存 不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。在NIO中通过避免在Java堆和Native堆中来回复制数据显著提高性能。
经常被忽略导致可能动态扩展时出现OutOfMemoryError异常。</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elasticsearch on ArgsNo&#39;s Notes</title>
    <link>https://argsno.github.com/tags/elasticsearch/</link>
    <description>Recent content in Elasticsearch on ArgsNo&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Jan 2019 22:25:10 +0800</lastBuildDate>
    
	<atom:link href="https://argsno.github.com/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elasticsearch面试题解读</title>
      <link>https://argsno.github.com/2019/elasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Sat, 26 Jan 2019 22:25:10 +0800</pubDate>
      
      <guid>https://argsno.github.com/2019/elasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E8%AF%BB/</guid>
      <description>题记 git上发现了网友总结的Elasticsearch BAT大厂面试题。只有题目，部分有答案，但不全。 正好抽出一些时间一起梳理一下。
既然是面试题，每个人都会有自己的结合业务场景的答案，没有非常标准的答案。 欢迎大家留言拍砖指正。
1、elasticsearch了解多少，说说你们公司es的集群架构，索引数据大小，分片有多少，以及一些调优手段 。 面试官：想了解应聘者之前公司接触的ES使用场景、规模，有没有做过比较大规模的索引设计、规划、调优。
解答： 如实结合自己的实践场景回答即可。 比如：ES集群架构13个节点，索引根据通道不同共20+索引，根据日期，每日递增20+，索引：10分片，每日递增1亿+数据， 每个通道每天索引大小控制：150GB之内。
仅索引层面调优手段：
1.1、设计阶段调优
 根据业务增量需求，采取基于日期模板创建索引，通过roll over API滚动索引； 使用别名进行索引管理； 每天凌晨定时对索引做force_merge操作，以释放空间； 采取冷热分离机制，热数据存储到SSD，提高检索效率；冷数据定期进行shrink操作，以缩减存储； 采取curator进行索引的生命周期管理； 仅针对需要分词的字段，合理的设置分词器； Mapping阶段充分结合各个字段的属性，是否需要检索、是否需要存储等。 …  1.2、写入调优
 写入前副本数设置为0； 写入前关闭refresh_interval设置为-1，禁用刷新机制； 写入过程中：采取bulk批量写入； 写入后恢复副本数和刷新间隔； 尽量使用自动生成的id。  1.3、查询调优
 禁用wildcard； 禁用批量terms（成百上千的场景）； 充分利用倒排索引机制，能keyword类型尽量keyword； 数据量大时候，可以先基于时间敲定索引再检索； 设置合理的路由机制。  1.4、其他调优
部署调优，业务调优等。
上面的提及一部分，面试者就基本对你之前的实践或者运维经验有所评估了。
2、elasticsearch的倒排索引是什么？ 面试官：想了解你对基础概念的认知。
解答：通俗解释一下就可以。
传统的我们的检索是通过文章，逐个遍历找到对应关键词的位置。 而倒排索引，是通过分词策略，形成了词和文章的映射关系表，这种词典+映射表即为倒排索引。 有了倒排索引，就能实现o（1）时间复杂度的效率检索文章了，极大的提高了检索效率。
学术的解答方式：
倒排索引，相反于一篇文章包含了哪些词，它从词出发，记载了这个词在哪些文档中出现过，由两部分组成——词典和倒排表。
加分项：倒排索引的底层实现是基于：FST（Finite State Transducer）数据结构。 lucene从4+版本后开始大量使用的数据结构是FST。FST有两个优点：
 空间占用小。通过对词典中单词前缀和后缀的重复利用，压缩了存储空间； 查询速度快。O(len(str))的查询时间复杂度。  3、elasticsearch 索引数据多了怎么办，如何调优，部署？ 面试官：想了解大数据量的运维能力。
解答：索引数据的规划，应在前期做好规划，正所谓“设计先行，编码在后”，这样才能有效的避免突如其来的数据激增导致集群处理能力不足引发的线上客户检索或者其他业务受到影响。 如何调优，正如问题1所说，这里细化一下：
3.1 动态索引层面 基于模板+时间+rollover api滚动创建索引，举例：设计阶段定义：blog索引的模板格式为：blog_index_时间戳的形式，每天递增数据。</description>
    </item>
    
  </channel>
</rss>